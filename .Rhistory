source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
}
openFile(fname = paste(path, "p30_emails.r", sep = ""))
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# emails
email <- reg2$email
email <- email[is.na(email) == FALSE]
cat(paste(email, sep = "", collapse = ", "))
head(reg2)
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)))
ROSTER
roster
?merge
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)))
# merge
reg0 <- merge(reg0, roster)
head(reg0)
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)))
# merge
reg0 <- merge(reg0, roster, by = c("first", "last"))
head(reg0)
head(roster)
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)))
# ====================================================
# add noshow information
# ====================================================
# rename columns
reg <- reg0 %>% rename(timestamp = "Timestamp", first = "First Name", last = "Last Name", inst = "Institution",
background = "Primary background", inst_other = "If other institution please specify:",
type = "Primary institution", question = "I would like to ask the panel:",
email = "E-mail", country = "Country", country_other = "If other country please specify:")
reg <- reg %>% mutate(email = tolower(email), timestamp = as.numeric(timestamp))
# find duplicates
dup <- reg[, c("first", "last")]
dup <- apply(dup, 1:2, as.character)
dup <- apply(dup, 1:2, tolower)
dup <- duplicated(dup)
reg[dup, c("first", "last", "email")]
# remove duplicates
reg <- reg[dup == FALSE, ]
# remove lines without first, last, email
empty <- with(reg, is.na(first) & is.na(last) & is.na(email))
reg <- reg[empty == FALSE, ]
# transform function
trafo <- function(x, i){gsub(" ", "", sapply(x, "[", i))}
# text to columns for type of institution
spl <- strsplit(as.character(reg$type), ",")
max(unlist(lapply(spl, length)))
type <- trafo(spl, 1)
reg$type <- type
# text to columns for backgrounds
spl <- strsplit(as.character(reg$background), ",")
max(unlist(lapply(spl, length)))
background <- trafo(spl, 1)
reg$background <- background
# ------------------------------------------
# generate institution column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$inst != "Other (please specify below)" & is.na(reg$inst_other) == FALSE)
reg$inst_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$inst == "Other (please specify below)")
reg$inst[ind_other] <- reg$inst_other[ind_other]
reg <- (reg %>% select(-inst_other))
# map institution names
map_inst <- as.data.frame(read_excel(paste(path.map, "map_inst.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_inst, by = "inst", all.x = TRUE, sort = FALSE)
# ------------------------------------------
# generate country column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$country != "Other (please specify below)" & is.na(reg$country_other) == FALSE)
reg$country_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$country == "Other (please specify below)")
reg$country[ind_other] <- reg$country_other[ind_other]
# map countries names
map_country <- as.data.frame(read_excel(paste(path.map, "map_country.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_country, by = "country", all.x = TRUE, sort = FALSE)
# generate full dataset
reg2 <- data.frame(reg[, c("timestamp", "first", "last", "email", "question", "type",
"background", "inst", "inst2", "country", "country2")])
# type of institution
with(reg2, table(type, useNA = "always"))
# total registered
nrow(reg2)
# ------------------------------------------
# unmapped entries?
# ------------------------------------------
reg2[is.na(select(reg2, "inst2")), ]
data.frame(reg2[is.na(select(reg2, "inst2")), "inst"])
reg2[is.na(select(reg2, "country2")), ]
data.frame(reg2[is.na(select(reg2, "country2")), "country"])
# ====================================================
# sort by registrations timepoint
# ====================================================
reg2 <- reg2 %>% arrange(timestamp)
# merge with roster
reg0 <- merge(reg2, roster, by = c("first", "last"))
head(reg0)
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)), "contributor" = 1)
roster
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)))
roster$contributor <- 1
roster
# ====================================================
# add noshow information
# ====================================================
# rename columns
reg <- reg0 %>% rename(timestamp = "Timestamp", first = "First Name", last = "Last Name", inst = "Institution",
background = "Primary background", inst_other = "If other institution please specify:",
type = "Primary institution", question = "I would like to ask the panel:",
email = "E-mail", country = "Country", country_other = "If other country please specify:")
reg <- reg %>% mutate(email = tolower(email), timestamp = as.numeric(timestamp))
# find duplicates
dup <- reg[, c("first", "last")]
dup <- apply(dup, 1:2, as.character)
dup <- apply(dup, 1:2, tolower)
dup <- duplicated(dup)
reg[dup, c("first", "last", "email")]
# remove duplicates
reg <- reg[dup == FALSE, ]
# remove lines without first, last, email
empty <- with(reg, is.na(first) & is.na(last) & is.na(email))
reg <- reg[empty == FALSE, ]
# transform function
trafo <- function(x, i){gsub(" ", "", sapply(x, "[", i))}
# text to columns for type of institution
spl <- strsplit(as.character(reg$type), ",")
max(unlist(lapply(spl, length)))
type <- trafo(spl, 1)
reg$type <- type
# text to columns for backgrounds
spl <- strsplit(as.character(reg$background), ",")
max(unlist(lapply(spl, length)))
background <- trafo(spl, 1)
reg$background <- background
# ------------------------------------------
# generate institution column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$inst != "Other (please specify below)" & is.na(reg$inst_other) == FALSE)
reg$inst_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$inst == "Other (please specify below)")
reg$inst[ind_other] <- reg$inst_other[ind_other]
reg <- (reg %>% select(-inst_other))
# map institution names
map_inst <- as.data.frame(read_excel(paste(path.map, "map_inst.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_inst, by = "inst", all.x = TRUE, sort = FALSE)
# ------------------------------------------
# generate country column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$country != "Other (please specify below)" & is.na(reg$country_other) == FALSE)
reg$country_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$country == "Other (please specify below)")
reg$country[ind_other] <- reg$country_other[ind_other]
# map countries names
map_country <- as.data.frame(read_excel(paste(path.map, "map_country.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_country, by = "country", all.x = TRUE, sort = FALSE)
# generate full dataset
reg2 <- data.frame(reg[, c("timestamp", "first", "last", "email", "question", "type",
"background", "inst", "inst2", "country", "country2")])
# type of institution
with(reg2, table(type, useNA = "always"))
# total registered
nrow(reg2)
# ------------------------------------------
# unmapped entries?
# ------------------------------------------
reg2[is.na(select(reg2, "inst2")), ]
data.frame(reg2[is.na(select(reg2, "inst2")), "inst"])
reg2[is.na(select(reg2, "country2")), ]
data.frame(reg2[is.na(select(reg2, "country2")), "country"])
# ====================================================
# sort by registrations timepoint
# ====================================================
reg2 <- reg2 %>% arrange(timestamp)
# merge with roster
reg0 <- merge(reg2, roster, by = c("first", "last"))
head(reg0)
# ====================================================
# add noshow information
# ====================================================
# rename columns
reg <- reg0 %>% rename(timestamp = "Timestamp", first = "First Name", last = "Last Name", inst = "Institution",
background = "Primary background", inst_other = "If other institution please specify:",
type = "Primary institution", question = "I would like to ask the panel:",
email = "E-mail", country = "Country", country_other = "If other country please specify:")
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("20250319_innovation.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "20250319_innovation.xlsx", sep = ""), col_types = rep("text", 11)))
# input roster
roster <- as.data.frame(read_excel(paste(path.data, "roster.xlsx", sep = ""), col_types = rep("text", 3)))
roster$contributor <- 1
# ====================================================
# add noshow information
# ====================================================
# rename columns
reg <- reg0 %>% rename(timestamp = "Timestamp", first = "First Name", last = "Last Name", inst = "Institution",
background = "Primary background", inst_other = "If other institution please specify:",
type = "Primary institution", question = "I would like to ask the panel:",
email = "E-mail", country = "Country", country_other = "If other country please specify:")
reg <- reg %>% mutate(email = tolower(email), timestamp = as.numeric(timestamp))
# find duplicates
dup <- reg[, c("first", "last")]
dup <- apply(dup, 1:2, as.character)
dup <- apply(dup, 1:2, tolower)
dup <- duplicated(dup)
reg[dup, c("first", "last", "email")]
# remove duplicates
reg <- reg[dup == FALSE, ]
# remove lines without first, last, email
empty <- with(reg, is.na(first) & is.na(last) & is.na(email))
reg <- reg[empty == FALSE, ]
# transform function
trafo <- function(x, i){gsub(" ", "", sapply(x, "[", i))}
# text to columns for type of institution
spl <- strsplit(as.character(reg$type), ",")
max(unlist(lapply(spl, length)))
type <- trafo(spl, 1)
reg$type <- type
# text to columns for backgrounds
spl <- strsplit(as.character(reg$background), ",")
max(unlist(lapply(spl, length)))
background <- trafo(spl, 1)
reg$background <- background
# ------------------------------------------
# generate institution column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$inst != "Other (please specify below)" & is.na(reg$inst_other) == FALSE)
reg$inst_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$inst == "Other (please specify below)")
reg$inst[ind_other] <- reg$inst_other[ind_other]
reg <- (reg %>% select(-inst_other))
# map institution names
map_inst <- as.data.frame(read_excel(paste(path.map, "map_inst.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_inst, by = "inst", all.x = TRUE, sort = FALSE)
# ------------------------------------------
# generate country column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$country != "Other (please specify below)" & is.na(reg$country_other) == FALSE)
reg$country_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$country == "Other (please specify below)")
reg$country[ind_other] <- reg$country_other[ind_other]
# map countries names
map_country <- as.data.frame(read_excel(paste(path.map, "map_country.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_country, by = "country", all.x = TRUE, sort = FALSE)
# generate full dataset
reg2 <- data.frame(reg[, c("timestamp", "first", "last", "email", "question", "type",
"background", "inst", "inst2", "country", "country2")])
# type of institution
with(reg2, table(type, useNA = "always"))
# total registered
nrow(reg2)
# ------------------------------------------
# unmapped entries?
# ------------------------------------------
reg2[is.na(select(reg2, "inst2")), ]
data.frame(reg2[is.na(select(reg2, "inst2")), "inst"])
reg2[is.na(select(reg2, "country2")), ]
data.frame(reg2[is.na(select(reg2, "country2")), "country"])
# ====================================================
# sort by registrations timepoint
# ====================================================
reg2 <- reg2 %>% arrange(timestamp)
# merge with roster
reg2 <- merge(reg2, roster, by = c("first", "last"), all = TRUE)
head(reg2)
filter(reg2, contributor == 1)
filter(reg2, contributor == 1 & is.na(timestamp))
select(filter(reg2, contributor == 1 & is.na(timestamp)), first, last)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/BBS/events/20250319_innovation/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
}
openFile(fname = paste(path, "p30_emails.r", sep = ""))
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/BBS/events/20250319_innovation/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
}
openFile(fname = paste(path, "p30_emails.r", sep = ""))
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# ====================================================
# add noshow information
# ====================================================
# rename columns
reg <- reg0 %>% rename(timestamp = "Timestamp", first = "First Name", last = "Last Name", inst = "Institution",
background = "Primary background", inst_other = "If other institution please specify:",
type = "Primary institution", question = "I would like to ask the panel:",
email = "E-mail", country = "Country", country_other = "If other country please specify:")
reg <- reg %>% mutate(email = tolower(email), timestamp = as.numeric(timestamp))
# find duplicates
dup <- reg[, c("first", "last")]
dup <- apply(dup, 1:2, as.character)
dup <- apply(dup, 1:2, tolower)
dup <- duplicated(dup)
reg[dup, c("first", "last", "email")]
# remove duplicates
reg <- reg[dup == FALSE, ]
# remove lines without first, last, email
empty <- with(reg, is.na(first) & is.na(last) & is.na(email))
reg <- reg[empty == FALSE, ]
# transform function
trafo <- function(x, i){gsub(" ", "", sapply(x, "[", i))}
# text to columns for type of institution
spl <- strsplit(as.character(reg$type), ",")
max(unlist(lapply(spl, length)))
type <- trafo(spl, 1)
reg$type <- type
# text to columns for backgrounds
spl <- strsplit(as.character(reg$background), ",")
max(unlist(lapply(spl, length)))
background <- trafo(spl, 1)
reg$background <- background
# ------------------------------------------
# generate institution column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$inst != "Other (please specify below)" & is.na(reg$inst_other) == FALSE)
reg$inst_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$inst == "Other (please specify below)")
reg$inst[ind_other] <- reg$inst_other[ind_other]
reg <- (reg %>% select(-inst_other))
# map institution names
map_inst <- as.data.frame(read_excel(paste(path.map, "map_inst.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_inst, by = "inst", all.x = TRUE, sort = FALSE)
# ------------------------------------------
# generate country column
# ------------------------------------------
# if entry != other delete what has been entered for "other"
ind_other <- (reg$country != "Other (please specify below)" & is.na(reg$country_other) == FALSE)
reg$country_other[ind_other] <- NA
# remove entries of "Other"
ind_other <- (reg$country == "Other (please specify below)")
reg$country[ind_other] <- reg$country_other[ind_other]
# map countries names
map_country <- as.data.frame(read_excel(paste(path.map, "map_country.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_country, by = "country", all.x = TRUE, sort = FALSE)
# generate full dataset
reg2 <- data.frame(reg[, c("timestamp", "first", "last", "email", "question", "type",
"background", "inst", "inst2", "country", "country2")])
# type of institution
with(reg2, table(type, useNA = "always"))
# total registered
nrow(reg2)
# ------------------------------------------
# unmapped entries?
# ------------------------------------------
reg2[is.na(select(reg2, "inst2")), ]
data.frame(reg2[is.na(select(reg2, "inst2")), "inst"])
reg2[is.na(select(reg2, "country2")), ]
data.frame(reg2[is.na(select(reg2, "country2")), "country"])
# ====================================================
# sort by registrations timepoint
# ====================================================
reg2 <- reg2 %>% arrange(timestamp)
# merge with roster
reg2 <- merge(reg2, roster, by = c("first", "last"), all = TRUE)
reg2
