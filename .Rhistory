tab2
# replace empty links
ind <- (is.na(select(tab, slides)[, 1]) & is.na(select(tab, link)[, 1]))
tab2[ind, "Download slides"] <- "No presentation available (may be added later for recent events, after having received speaker approval)"
tab2
if (is.na(select(meta, link)) == FALSE){paste("[link to event](", select(meta, link)[, 1], ")", sep = "")} else {""}
meta
if (is.na(select(meta, summary)) == FALSE){paste("[link to event](", select(meta, summary)[, 1], ")", sep = "")} else {""}
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/BBS/events/20250319_innovation/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# emails
email <- reg2$email
email <- email[is.na(email) == FALSE]
cat(paste(email, sep = "", collapse = ", "))
# contributors who have not registered yet
select(filter(reg2, contributor == 1 & is.na(timestamp)), first, last, email)
install.packages("countrycode")
renv::update()
install.packages("rnaturalearth")
install.packages("rnaturalearthdata")
install.packages("RColorBrewer")
## load packages
packs.html <- c("knitr", "pander", "dplyr", "readxl")
for (i in 1:length(packs.html)){library(packs.html[i], character.only = TRUE)}
## load packages
packs.html <- c("knitr", "pander", "dplyr", "readxl")
for (i in 1:length(packs.html)){library(packs.html[i], character.only = TRUE)}
library("knitr")
library("pander")
library("dplyr")
library("readxl")
## load packages
library("knitr")
library("pander")
library("dplyr")
library("readxl")
knitr::opts_chunk$set(echo = TRUE)
## upcoming
path <- getwd()
upcoming <- as.data.frame(read_excel(paste(path, "/data/upcoming.xlsx", sep = ""), col_types = NULL))
lunch <- upcoming |> filter(tolower(event) == "bbs nextgen lunch")
has_lunch <- nrow(lunch) > 0
## roster
path <- getwd()
roster <- read_excel("data/roster_nextgen.xlsx", na = character())
roster$Name <- paste(roster$First, roster$Last, sep = " ")
roster <- roster |>
filter(Committee == 1) |>
arrange(Company, Last, First) |>
select(Name, Company)
# roster[is.na(roster)] <- ""
kable(roster)
## load packages
library("knitr")
library("pander")
library("dplyr")
library("readxl")
knitr::opts_chunk$set(echo = TRUE)
## upcoming
path <- getwd()
upcoming <- as.data.frame(read_excel(paste(path, "/data/upcoming.xlsx", sep = ""), col_types = NULL))
lunch <- upcoming |> filter(tolower(event) == "bbs nextgen lunch")
has_lunch <- nrow(lunch) > 0
## roster
path <- getwd()
roster <- read_excel("data/roster_nextgen.xlsx", na = character())
roster$Name <- paste(roster$First, roster$Last, sep = " ")
roster <- roster |>
filter(Committee == 1) |>
arrange(Company, Last, First) |>
select(Name, Company)
# roster[is.na(roster)] <- ""
kable(roster)
renv::update()
## load packages
library("knitr")
library("pander")
library("dplyr")
library("readxl")
knitr::opts_chunk$set(echo = TRUE)
## upcoming
path <- getwd()
upcoming <- as.data.frame(read_excel(paste(path, "/data/upcoming.xlsx", sep = ""), col_types = NULL))
lunch <- upcoming |> filter(tolower(event) == "bbs nextgen lunch")
has_lunch <- nrow(lunch) > 0
lunch
has_lunch
lunch$date
I(ifelse(has_lunch, paste0("The next lunch will be at KLARA (Clarastrasse 13, 4058 Basel) from 12-13 CET on ", lunch$date, " - [RSVP here](", lunch$registration, ")."), ""))
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/ISCB/2025 Basel ISCB46/30 registration/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# emails
email <- reg2$email
email <- email[is.na(email) == FALSE]
cat(paste(email, sep = "", collapse = ", "))
# contributors who have not registered yet
select(filter(reg2, contributor == 1 & is.na(timestamp)), first, last, email)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/ISCB/2025 Basel ISCB46/30 registration/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# emails
email <- reg2$email
email <- email[is.na(email) == FALSE]
cat(paste(email, sep = "", collapse = ", "))
# contributors who have not registered yet
select(filter(reg2, contributor == 1 & is.na(timestamp)), first, last, email)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/ISCB/2025 Basel ISCB46/30 registration/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/ISCB/2025 Basel ISCB46/30 registration/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# emails
email <- reg2$email
email <- email[is.na(email) == FALSE]
cat(paste(email, sep = "", collapse = ", "))
# contributors who have not registered yet
select(filter(reg2, contributor == 1 & is.na(timestamp)), first, last, email)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/ISCB/2025 Basel ISCB46/30 registration/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
packs <- c("readxl", "openxlsx", "dplyr", "rnaturalearth", "rnaturalearthdata",
"ggplot2", "RColorBrewer", "filesstrings", "reporttools", "PBSmodelling")
for (i in 1:length(packs)){library(packs[i], character.only = TRUE)}
# folder where you download registration DB to
path.from      <- "C:/Users/M335337/Downloads/"
# files for mapping
path.depot     <- "C:/rufibach/05_Depot/"
path.map       <- paste(path.depot, "mapping/", sep = "")
# code files and data
path0 <- "C:/rufibach/70_Service/ISCB/2025 Basel ISCB46/30 registration/analysis/"
path <- path0
path.functions <- paste(path, "functions/", sep = "")
path.data      <- paste(path, "data/", sep = "")
## functions
source("C:/rufibach/05_Depot/functions/deleteAux.r", echo = FALSE)
source(paste(path.functions, "prepTable.r", sep = ""), echo = FALSE)
source(paste(path.functions, "isValidEmail.r", sep = ""), echo = FALSE)
# open further files to be run
if (1 == 0){
openFile(fname = paste(path, "p02_block_bookings.r", sep = ""))
openFile(fname = paste(path, "p05_input_data.r", sep = ""))
openFile(fname = paste(path, "p07_prepare_data.r", sep = ""))
openFile(fname = paste(path, "p10_mapping.r", sep = ""))
openFile(fname = paste(path, "p20_changes_in_registration.r", sep = ""))
openFile(fname = paste(path, "p40_export_datasets.r", sep = ""))
openFile(fname = paste(path, "p30_emails.r", sep = ""))
}
# source input files
source(paste(path, "p05_input_data.r", sep = ""), echo = FALSE)
source(paste(path, "p07_prepare_data.r", sep = ""), echo = FALSE)
source(paste(path, "p10_mapping.r", sep = ""), echo = FALSE)
source(paste(path, "p30_emails.r", sep = ""), echo = FALSE)
source(paste(path, "p40_export_datasets.r", sep = ""), echo = FALSE)
# emails
email <- reg2$email
email <- email[is.na(email) == FALSE]
cat(paste(email, sep = "", collapse = ", "))
# --------------------------------------------------------------
# input data
# --------------------------------------------------------------
# input registrations
file <- grep("01. REGISTRATION DAILY REPORT.xlsx", list.files(path.from))
if (length(file) > 0){file.move(files = paste(path.from, list.files(path.from)[file], sep = ""), destinations = path.data, overwrite = TRUE)}
reg0 <- as.data.frame(read_excel(paste(path.data, "01. REGISTRATION DAILY REPORT.xlsx", sep = ""), col_types = NULL))
# ====================================================
# add noshow information
# ====================================================
# rename columns
reg <- reg0[is.na(reg0[, 1]) == FALSE, ]
reg <- reg[-c(1, 2), c(3, 4, 5, 10, 12)]
colnames(reg) <- c("last", "first", "inst", "country", "email")
reg <- reg %>% mutate(email = tolower(email))
# find duplicates
dup <- reg[, c("first", "last")]
dup <- apply(dup, 1:2, as.character)
dup <- apply(dup, 1:2, tolower)
dup <- duplicated(dup)
reg[dup, c("first", "last", "email")]
# remove duplicates
reg <- reg[dup == FALSE, ]
# remove lines without first, last, email
empty <- with(reg, is.na(first) & is.na(last) & is.na(email))
reg <- reg[empty == FALSE, ]
# transform function
trafo <- function(x, i){gsub(" ", "", sapply(x, "[", i))}
# ------------------------------------------
# generate institution column
# ------------------------------------------
# map institution names
map_inst <- as.data.frame(read_excel(paste(path.map, "map_inst.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_inst, by = "inst", all.x = TRUE, sort = FALSE)
# ------------------------------------------
# generate country column
# ------------------------------------------
# map countries names
map_country <- as.data.frame(read_excel(paste(path.map, "map_country.xlsx", sep = ""),
col_types = rep("text", 2)))
# merge with mapping
reg <- merge(reg, map_country, by = "country", all.x = TRUE, sort = FALSE)
# generate full dataset
reg2 <- data.frame(reg[, c("first", "last", "email", "inst", "inst2", "country", "country2")])
# total registered
nrow(reg2)
# ------------------------------------------
# unmapped entries?
# ------------------------------------------
reg2[is.na(select(reg2, "inst2")), ]
data.frame(reg2[is.na(select(reg2, "inst2")), "inst"])
reg2[is.na(select(reg2, "country2")), ]
data.frame(reg2[is.na(select(reg2, "country2")), "country"])
# --------------------------------------------------------------
# define paths, load packages, load functions
# --------------------------------------------------------------
i1 <- data.frame(reg2[is.na(select(reg2, "inst2")), "inst"])
c1 <- data.frame(reg2[is.na(select(reg2, "country2")), "country"])
# institution
is <- i1
is <- is[is.na(is) == FALSE, ]
is <- unique(is)
if (length(is) > 0){
openFile(fname = paste(path.map, "map_inst.xlsx", sep = ""))
write.table(is, file = paste(path.from, "is.csv", sep = ""), row.names = FALSE, col.names = FALSE)
openFile(fname = paste(path.from, "is.csv", sep = ""))
}
# country
cs <- c1
cs <- cs[is.na(cs) == FALSE, ]
cs <- unique(cs)
if (length(cs) > 0){
openFile(fname = paste(path.map, "map_country.xlsx", sep = ""))
write.table(cs, file = paste(path.from, "cs.csv", sep = ""), row.names = FALSE, col.names = FALSE)
openFile(fname = paste(path.from, "cs.csv", sep = ""))
}
# ====================================================
# all email addresses for copy and paste into calendar invite
# ====================================================
#last <- read.csv(file = paste(path.data, "last.csv", sep = ""))[1, 2]
last <- "armand.chouzy@bms.com"
last_update <- which(reg2$email == last)
last_update <- 1
newmails <- reg2$email[last_update:nrow(reg2)]
newmails2 <- paste(newmails, collapse = ", ")
newmails2
# ====================================================
# check emails
# ====================================================
table(isValidEmail(newmails))
# ====================================================
# find spaces and emails with missing @
# ====================================================
newmails[isValidEmail(newmails) == TRUE]
# ====================================================
# manually check
# ====================================================
newmails
# ====================================================
# all email addresses for copy and paste into calendar invite
# ====================================================
#last <- read.csv(file = paste(path.data, "last.csv", sep = ""))[1, 2]
last <- "armand.chouzy@bms.com"
last_update <- which(reg2$email == last)
last_update <- 1
newmails <- reg2$email[last_update:nrow(reg2)]
newmails2 <- paste(newmails, collapse = ", ")
newmails2
# ====================================================
# check emails
# ====================================================
table(isValidEmail(newmails))
# ====================================================
# find spaces and emails with missing @
# ====================================================
newmails[isValidEmail(newmails) == TRUE]
# ====================================================
# manually check
# ====================================================
newmails[is.na(newmails) == FALSE]
# ====================================================
# newly registered participants
# ====================================================
write.table(paste(newmails[is.na(newmails) == FALSE], collapse = ", "), file = paste(path.data, "emails.txt", sep = ""))
write.csv(tail(newmails, 1), file = paste(path.data, "last.csv", sep = ""))
# shorten reg2 to relevant columns
reg2short <- reg2 %>% select(first, last, email, inst2, country2) %>% arrange(last, first)
# ====================================================
# all registrations
# ====================================================
write.xlsx(x = reg2short, file = paste(path.data, "EFSPI2024_all_registered_participants.xlsx", sep = ""))
# ====================================================
# all Novartis registrations
# ====================================================
nov <- reg2short %>% filter(inst2 %in% c("Novartis"))
write.xlsx(x = nov, file = paste(path.data, "EFSPI2024_Novartis.xlsx", sep = ""))
# ====================================================
# all Roche registrations
# ====================================================
roche <- reg2short %>% filter(inst2 %in% c("Roche"))
write.xlsx(x = roche, file = paste(path.data, "EFSPI2024_Roche.xlsx", sep = ""))
# ====================================================
# all Merck KGaA registrations
# ====================================================
merck <- reg2short %>% filter(inst2 %in% c("Merck KGaA"))
write.xlsx(x = merck, file = paste(path.data, "EFSPI2024_Merck.xlsx", sep = ""))
merck
# ====================================================
# for analysis on BBS webpage
# ====================================================
path.bbs <- "C:/rufibach/90_github_repos/BBS/home/talks/20250824/"
reg3 <- reg2 %>% select(inst2, country2)
write.xlsx(x = reg3, file = paste(path.bbs, "reg3.xlsx", sep = ""))
